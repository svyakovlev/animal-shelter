package com.teamwork.animalshelter.action;

import java.util.Map;

/**
 * Интерфейс Askable предназначен для обеспечения диалога с клиентом
 * посредством подготовки вопросов перед отправкой и анализом полученных ответов от пользователя
 *
 * @author  Artemiev Stanislav
 * @see  Questionnaire
 * @see  Menu
 */
public interface Askable {
    /**
     * Функция делает первичную подготовку объекта для использования.
     * Каждая реализация имеет свой тип инициализации в зависимости от
     * внутренней структуры данных.
     */
    void init();

    /**
     * @return Возвращает {@code true}, когда по текущему вопросу получен ответ пользователя и больше нет новых вопросов.
     */
    boolean empty();

    /**
     * @return Возвращается строковое представление очередного вопроса пользователю.
     * Если ответ пользователя был с ошибкой, то возвращается повторное строковое представление этого же вопроса.
     * Переход к новому вопросу осуществляется в функции {@link #setResponse(String)} после фиксации ответа пользователю.
     */
    Object nextAction();

    /**
     * Функция фиксирует ответ пользователя и делает переход к новому вопросу (если он существует).
     * @param response ответ пользователя
     */
    void setResponse(String response);

    /**
     * Функция проверяет ответ пользователя на ошибки. Проверка ответа зависит от реализации интерфейса.
     * @param response ответ пользователя.
     * @return результат проверки ответа пользователя.
     */
    boolean checkResponse(String response);

    /**
     * Возвращает результат в зависимости от реализации интерфейса
     * @return {@code Map}
     * <ul>
     *     <li>{@code key} - метка</li>
     *     <li>{@code value} - значение, зависящее от метки.</li>
     * </ul>
     * @see  Questionnaire
     * @see  Menu
     */
    Map<String, String> getResult();

    /**
     * Позволяет определить, требуется ли проверка ответа пользователя
     * @return {@code true} если проверка ответа пользователя требуется
     */
    boolean verificationRequired();

    /**
     * Устанавливает режим ожидания ответа от пользователя
     * @param waitingResponse {@code true}, если режим ожидания ответа требуется включить, {@code false}, если режим ожидания ответа требуется выключить
     */
    void setWaitingResponse(boolean waitingResponse);

    /**
     * Позволяет определить, включен ли режим ожидания ответа от пользователя
     * @return {@code true} если включен
     */
    boolean isWaitingResponse();

    /**
     * Возвращает расшифровку ошибки, которая произошла при последней проверке ответа пользователя
     * @return расшифровка ошибки
     */
    String getLastError();

    /**
     * Определяет, превышен ли интервал ожидания ответа от пользователя
     * @param minutes количество минут, прошедших с начсла отправки очередного вопроса пользователю
     * @return
     */
    boolean intervalExceeded(int minutes);

    /**
     * Название созданного объекта {@code Askable} используется в кэше шаблонов и в кэше объектов для
     * быстрого доступа при очередном обращении пользователя.
     * @return возвращает название созданного объекта.
     * @see AskableServiceObjects
     */
    String getName();

    /**
     * Создает полный дубликат объекта
     * @return возвращает новый объект {@code Askable}
     * @see Menu
     * @see Questionnaire
     */
    Askable dublicate();
}
